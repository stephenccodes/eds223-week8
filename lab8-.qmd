---
title: "eds223-week8-lab"
format: html
editor: visual
---

---
title: "eds223-week8-lab"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
# Load packages
library(terra)
library(sf)
library(tidyverse)
library(here)
library(tmap)
```

```{r}
# Define a function to compute NDVI
ndvi_fun <- function(nir, red){
  (nir - red) / (nir + red)
}
```

### Compute NDVI for a single scene

```{r}
# Read in data
landsat_20180612 <- rast(here("data", "landsat_20180612.tif"))

# Update the names of the layers to match spectral bands
names(landsat_20180612) <- c("blue", "green","red", "NIR", "SWIR1", "SWIR2")

# Find the NDVI for one scene with `lapp()` (applys function to every raster square)
ndvi_20180612 <- lapp(landsat_20180612[[c(4,3)]], fun = ndvi_fun) # numbers refer to location in names vector

# Map it
tm_shape(ndvi_20180612) +
  tm_raster(title = "NDVI") +
  tm_layout(legend.outside = TRUE)
```


### Compute NDVI for all scenes
```{r}
# Write a function to repeat for the remaining scenes

# Make a NDVI function
ndvi_fun <- function(nir, red){
  (nir - red) / (nir + red)
}

# Write *pseudo code* to make a plan for all scenes
create_ndvi_layer <- function(i){
  # step 1: read in scene
  landsat <- terra::rast(files[i])
  
  # step 2: re-name bands in scene
  names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
  
  # step 3: compute NDVI
  ndvi <- lapp(landsat[[c(4,3)]], fun = ndvi_fun)
  
  return (ndvi)
}


landsat_20180612 <- rast(here("data", "landsat_20180612.tif"))
```

```{r}
# Make a data frame with the names of all of our file names
files <- list.files(here("data"),
                    pattern = "*.tif",
                    full.names = TRUE) # pattern argument allows us to remove unwanted files from product
```

```{r}
# Find the NDVI fro the first scene
ndvi_1 <- create_ndvi_layer(1)
```

```{r}
# Find th NDVI for all 8 scenes
all_ndvi <- c(create_ndvi_layer(1),
              create_ndvi_layer(2),
              create_ndvi_layer(3),
              create_ndvi_layer(4),
              create_ndvi_layer(5),
              create_ndvi_layer(6),
              create_ndvi_layer(7),
              create_ndvi_layer(8))

# List the names for the respective scenes
names(all_ndvi) <- c("2018-06-12",
                     "2018-08-15",
                     "2018-10-18",
                     "2018-11-02",
                     "2019-01-22",
                     "2019-02-23",
                     "2019-04-12",
                     "2019-07-01")
```


### A more streamlined way to re-name the scenes
```{r}
# Make a data frame with jsut the dates from the file names
file_names <- data.frame(file_name = files) %>%
  #mutate(date = str_match(file_name, "(_)[](.)"))
  mutate(date = str_sub(file_name, start = -12L, end = -5L))

# Update the name to the dates we just pulled out
names(all_ndvi) <- file_names$date
```

## Compare NDVI across veg communities

### Get data on veg communities

```{r}

sites <- st_read(here("data", "study_sites.shp"))

tm_shape(all_ndvi[[1]]) +
  tm_raster() +
  tm_shape(sites) +
  tm_polygons()
```

### Extract NDVI at study sites

```{r}
# Find the average NDVI within each study site
sites_ndvi <- terra::extract(all_ndvi, sites, fun = "mean")

# Bind it back to original data frame
sites_annotated <- cbind(sites, sites_ndvi)
```

```{r}
# Clean up the data
sites_clean <- sites_annotated %>%
  # Initial cleaning
  select(-ID) %>% # Remove ID generated by terra::extract()
  st_drop_geometry() %>%
  # Re-format data frame
  pivot_longer(!study_site)%>%
  rename("NDVI" = value) %>% # Assign "value" to NDVI
  # Create date component attributes
  mutate("year" = str_sub(name, 2, 5),
         "month" = str_sub(name, 6, 7),
         "day" = str_sub(name, -2, -1)) %>%
  # Combine the date elements
  unite("date", 4:6, sep = "-") %>%
  mutate("date" = lubridate::as_date(date)) %>%
  select(-name) %>%
  # Rename combine study sites by vegetation type
  mutate("veg_type" = case_when(study_site == "forest1" ~ "forest",
                                study_site == "forest2" ~ "forest",
                                study_site == "forest3" ~ "forest",
                                study_site == "grassland" ~ "grassland",
                                study_site == "chaparral" ~ "chaparral")) %>%
  # Summarize results by vegetation type
  group_by(veg_type, date) %>%
  summarize("NDVI" = mean(NDVI, na.rm = TRUE))
```

```{r}
ggplot(sites_clean, aes(x = date, y = NDVI, col = veg_type)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(x = " ",
       y = "Normalized Difference Vegetation Index (NDVI)",
       col = "Vegetation type",
       title = "Seasonal cycle of vegetation productivity")
```








